-- 회원 정보 테이블
-- 아이디, 비밀번호, 이름, 나이
-- 문자(열) : VARCHAR2(100)
-- VARCHAR2() 안의 숫자 : BYTE 수 - 글자수의 제한. (영어는 한 글자당 1BYTE, 한글은 한 글자당 3BYTE), 최대 4000BYTE
-- 숫자 : NUMBER

-- 테이블 생성 할 때 기본키(PRIMARY KEY) 선언은 반드시 해줘야 한다. 
-- 기본키로 선언된 컬럼은 값이 중복이 될 수 없고 동시에 NULL도 못들어옵니다.

-- 데이터는 중복 저장이 불가
CREATE TABLE BASIC_MEMBER (
    --컬럼명 자료형 [제약조건]
    MEMBER_ID VARCHAR2(100) PRIMARY KEY
    , MEMBER_PW VARCHAR2(100)
    , MEMBER_NAME VARCHAR2(100)
    , MEMBER_AGE NUMBER
);

SELECT * FROM BASIC_MEMBER;
-- 테이블 삭제 쿼리 : DROP TABLE 테이블명;

DROP TABLE BASIC_MEMBER;

-- 데이터 삽입 문법
-- INSERT INTO 테이블명 (컬럼들) VALUES (값들);
-- ****** 테이블의 데이터에 변화(삽입, 삭제, 수정)가 있을 경우 쿼리문 실행하면 저장되지 않는다
-- 데이터의 변화를 저장하기 위해서는 반드시 COMMIT 혹은 ROLLBACK을 해줘야 한다. !!!!!!!!!!!! 아주 중요
-- COMMIT : 실행한 쿼리문을 저장
-- ROLLBACK : 실행한 쿼리문을 취소
INSERT INTO BASIC_MEMBER (MEMBER_ID, MEMBER_PW, MEMBER_NAME, MEMBER_AGE) VALUES ('ID1', '1111', '김자바', 20);
INSERT INTO BASIC_MEMBER (MEMBER_ID, MEMBER_PW, MEMBER_NAME, MEMBER_AGE) VALUES ('ID2', '1111', '김자바', 20);
INSERT INTO BASIC_MEMBER (MEMBER_ID, MEMBER_PW, MEMBER_NAME, MEMBER_AGE) VALUES ('ID3', NULL, NULL, 20);
INSERT INTO BASIC_MEMBER (MEMBER_ID, MEMBER_PW, MEMBER_NAME, MEMBER_AGE) VALUES (NULL, '1111', '김자바', 20);
-- 삽입할 때 컬럼명을 전부 적을 필요는 없다.
-- 단 데이터 입력을 하는 컬럼의 수의 VALUE의 수는 같아야 한다.
-- 삽입에서 제외된 컬럼은 NULL데이터가 들어간다.
INSERT INTO BASIC_MEMBER (MEMBER_ID, MEMBER_PW, MEMBER_NAME) VALUES ('ID4', '1111', '김자바');
ROLLBACK;
COMMIT;

DROP TABLE BASIC_STUDENT; -- 복구 불가.
CREATE TABLE BASIC_STUDENT(
    STU_NUM NUMBER PRIMARY KEY
    , STU_NAME VARCHAR2(50)
    , STU_AGE NUMBER
    , KOR_SCORE NUMBER
    , ENG_SCORE NUMBER
);

SELECT * FROM BASIC_STUDENT;
DESC BASIC_STUDENT;

INSERT INTO BASIC_STUDENT (STU_NUM, STU_NAME, STU_AGE, KOR_SCORE, ENG_SCORE) VALUES (1001, '홍길동', 20, 100, 95);
INSERT INTO BASIC_STUDENT (STU_NUM, STU_NAME, STU_AGE, KOR_SCORE, ENG_SCORE) VALUES (1002, '김자바', 30, 90, 85);
INSERT INTO BASIC_STUDENT (STU_NUM, STU_NAME, STU_AGE, KOR_SCORE, ENG_SCORE) VALUES (1003, '임꺽정', 40, 80, 75);
INSERT INTO BASIC_STUDENT (STU_NUM, STU_NAME, STU_AGE, KOR_SCORE, ENG_SCORE) VALUES (1004, '이순신', 50, 70, 65);
INSERT INTO BASIC_STUDENT (STU_NUM, STU_NAME, STU_AGE, KOR_SCORE, ENG_SCORE) VALUES (1005, '유관순', 60, 60, 55);

COMMIT;

SELECT STU_NUM, STU_NAME, KOR_SCORE + ENG_SCORE AS SUM_SCORE
FROM BASIC_STUDENT
ORDER BY SUM_SCORE DESC;

SELECT STU_NUM, STU_NAME
FROM BASIC_STUDENT
WHERE (KOR_SCORE + ENG_SCORE) > 160 AND KOR_SCORE >= 85;

-- 데이터 삭제(테이블 삭제랑 달라요!!!!!!)
-- 테이블 삭제 : DROP TABLE 테이블명;
-- 데이터 삭제 : DELETE [FROM] 테이블명 조건;
DELETE FROM BASIC_STUDENT;
SELECT * FROM BASIC_STUDENT;

DELETE FROM BASIC_STUDENT
WHERE STU_NUM = 1005;

INSERT INTO BASIC_STUDENT (STU_NUM, STU_NAME, STU_AGE, KOR_SCORE, ENG_SCORE) VALUES (1006, '장영실', 70, 100, 100);
SELECT * FROM BASIC_STUDENT;

-- BASIC_STUDENT 테이블에서 나이가 60살 이상인 학생 데이터를 삭제하는 기능을 만드세요.
DELETE FROM BASIC_STUDENT WHERE STU_AGE >= 60;


-- 회원정보를 저장하는 테이블을 만들어보자
-- 회원정보의 정보로는 회원id, 비번, 이름, 나이, 가입일이 있다.
-- 테이블명 : TEST_MEMBER
-- 기본 키 : ID

CREATE TABLE TEST_MEMBER(
    MEM_ID VARCHAR2(60) PRIMARY KEY
    , MEM_PW VARCHAR2(60)
    , MEM_NAME VARCHAR2(60) NOT NULL
    , MEM_AGE NUMBER
    , JOIN_DATE DATE DEFAULT SYSDATE
);
DROP TABLE TEST_MEMBER;

INSERT INTO TEST_MEMBER (MEM_ID, MEM_PW, MEM_NAME, MEM_AGE, JOIN_DATE) VALUES ('AAA', 'AAA', '김형진', 30, SYSDATE);
INSERT INTO TEST_MEMBER (MEM_ID, MEM_PW, MEM_NAME, MEM_AGE) VALUES ('DD', 'AAA', '김형진', 30);
SELECT * FROM TEST_MEMBER;

-- DUAL 테이블 : 더미 테이블, 문법 확인용 테이블
-- 오늘 날짜를 조회.
SELECT SYSDATE, '안녕'||'하세요' FROM DUAL;
SELECT SYSDATE FROM DUAL;
SELECT SYSDATE FROM EMP;
DESC EMP;

INSERT INTO TEST_MEMBER (MEM_ID, MEM_PW, MEM_NAME, MEM_AGE) VALUES ('123', '123', '123', 20);

DELETE TEST_MEMBER
WHERE MEM_ID = '123';

SELECT * FROM TEST_MEMBER;

INSERT INTO TEST_MEMBER (MEM_ID, MEM_PW, MEM_NAME, MEM_AGE) VALUES ('ID1', '123', '김씨', 20);
INSERT INTO TEST_MEMBER (MEM_ID, MEM_PW, MEM_NAME, MEM_AGE) VALUES ('ID2', '111', '이씨', 30);
INSERT INTO TEST_MEMBER (MEM_ID, MEM_PW, MEM_NAME, MEM_AGE) VALUES ('ID3', '222', '박씨', 40);
INSERT INTO TEST_MEMBER (MEM_ID, MEM_PW, MEM_NAME, MEM_AGE) VALUES ('ID4', '333', '최씨', 50);
INSERT INTO TEST_MEMBER (MEM_ID, MEM_PW, MEM_NAME, MEM_AGE) VALUES ('ID5', '444', '윤씨', 60);

COMMIT;

SELECT MEM_ID, MEM_PW, MEM_NAME, MEM_AGE, JOIN_DATE FROM TEST_MEMBER WHERE MEM_ID = '?';

-- 게시판 테이블
CREATE TABLE BASIC_BOARD(
    BOARD_NUM NUMBER PRIMARY KEY
    , TITLE VARCHAR2(100) NOT NULL
    , CONTENT VARCHAR2(500)
    , WRITER VARCHAR2(100) NOT NULL
    , READ_CNT NUMBER DEFAULT 0
    , CREATE_DATE DATE DEFAULT SYSDATE
);

-- 다음에 들어갈 게시글번호를 정하고 싶어요.
-- 게시글 번호는 1부터 1씩 증가 시켜서 넣을거에요.
-- 1 2 3 4 5 6 7
-- 다음에 들어갈 글번호를 조회하는 쿼리
INSERT INTO BASIC_BOARD VALUES (1, '제목', '내용', '작성자', 0, SYSDATE);
INSERT INTO BASIC_BOARD VALUES (2, '제목', '내용', '작성자', 0, SYSDATE);
INSERT INTO BASIC_BOARD VALUES (3, '제목', '내용', '작성자', 0, SYSDATE);
SELECT * FROM BASIC_BOARD;

-- 연산에서 NULL이 포함되면 결과는 무조건 NULL..
SELECT MAX(BOARD_NUM) + 1 FROM BASIC_BOARD;
SELECT NVL(MAX(BOARD_NUM), 0) + 1 FROM BASIC_BOARD;

INSERT INTO BASIC_BOARD VALUES ((SELECT MAX(BOARD_NUM) + 1 FROM BASIC_BOARD), '제목', '내용', '작성자', 0, SYSDATE);
INSERT INTO BASIC_BOARD VALUES ((SELECT NVL(MAX(BOARD_NUM), 0) + 1 FROM BASIC_BOARD), '제목', '내용', '작성자', 0, SYSDATE);
DELETE BASIC_BOARD;

-- 커미션이 NULL인 사원의 커미션은 0으로 조회.
SELECT * FROM EMP;

--NVL : NULL값을 특정한 값으로 치환하여 조회
SELECT ENAME, COMM, NVL(COMM, 0)
FROM EMP;


SELECT BOARD_NUM, TITLE, CONTENT, WRITER, READ_CNT, CREATE_DATE FROM BASIC_BOARD WHERE BOARD_NUM=10;

DELETE BASIC_BOARD WHERE BOARD_NUM = 10;

SELECT * FROM BASIC_BOARD;